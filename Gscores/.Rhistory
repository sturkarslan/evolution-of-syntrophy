View(mut.data.dv)
View(dvh.genome)
library('progress')
source('load_1K_mutation_data.R')
# load genome
dvh.genome <- read.delim("~/Google Drive File Stream/My Drive/Manuscripts/Syntrophy-SingleCell/GenomeFiles/GCF_000195755.1_ASM19575v1_feature_table.txt",
header = T, sep="\t", stringsAsFactors=F)
# collect only genes
dvh.genes <- dvh.genome[which(dvh.genome$X..feature == "gene"),]
# create position list for each gene
coordinate.list <- list()
all.coordinates <- vector()
for(gene in dvh.genes$locus_tag){
start <- dvh.genes[which(dvh.genes$locus_tag == gene),"start"]
end <- dvh.genes[which(dvh.genes$locus_tag == gene),"end"]
initial.pos <- min(start, end)
final.pos <-max(start, end)
# if plasmid, add coordinates to the end of the lst chromosome position
if(dvh.genes[which(dvh.genes$locus_tag == gene),"seq_type"] == "chromosome"){
interval <- seq(from=initial.pos, to=final.pos, by = 1)
} else{
interval <- seq(from= (3570714 + initial.pos), to= (3570714 + final.pos), by = 1)
}
coordinate.list[[gene]] <- interval
all.coordinates <- c(all.coordinates, interval)
}
### randomly select coordinates from mutated genome
# total # of mutations
total.genes <- length(dvh.genes$GeneID)
# get all mutations except synonymous and intergenic
mutations.1000.na <- load_1K_mutation_data(include.ancestor = F,organism = "Desulfovibrio")
mutations.1000.na <- mutations.1000.na$mutations.1K.na
all.mutations <- mutations.1000.na[which(mutations.1000.na$effect == "HIGH" | mutations.1000.na$effect == "MODERATE"),]
Ntot <- length(all.mutations$variant_id)
cat("Total # of 1K mutations for DvH: ", Ntot, "\n")
# total length of coding genome
Ltot <- sum(dvh.genes$feature_interval_length)
gscore.table <- data.frame()
gscores = vector()
simulation.target = 1000
pb <- progress_bar$new(
format = " :what Remaining [:bar] :percent eta: :eta (:spin)",
total = simulation.target, clear = FALSE, width= 100)
#pb <- txtProgressBar(min = 1, max = simulation.target, style = 3 ) # progress bar
#cat("Completed %:", "\n")
for(simulation.no in 1:simulation.target){
pb$tick(tokens = list(what = paste("Sim # ", simulation.no, sep="")))
Sys.sleep(1 / simulation.target)
#cat("Running simulation # ", simulation.no, "\n")
#progress <- setTxtProgressBar(pb, simulation.no)
#cat(paste("Running simulation # ", simulation.no, progress, "\n", sep = " "))
# Random position selection
# for whole genome
#random.positions <- sample(seq(from= 1,to= 3570714,by = 1), Ntot)
# for coding genome only
random.positions <- sample(all.coordinates, Ntot)
hit.genes <- vector()
for(position in random.positions){
hit.indice <- which(sapply(1:length(coordinate.list), function(x) any(coordinate.list[[x]] == position)))
hit.gene <- names(coordinate.list[hit.indice])
#hit.gene <- names(coordinate.list[grep(position, coordinate.list)])
hit.genes <- append(hit.genes, hit.gene)
}
# calculate Gscore for each gene
#cat("Calculating Gscores for all genes in the genome..\n")
gscore.sum = 0
gene.no = 0
for(gene in dvh.genes$locus_tag){
Li <- dvh.genes[which(dvh.genes$locus_tag == gene),"feature_interval_length"]
Ni <- length(grep(gene, hit.genes))
# calculate expected number of mutations
Ei <- Ntot*(Li/Ltot)
# calculate GScore
Gscore <- 2*Ni*log1p(Ni/Ei)
#cat(gene, Li, Ni, Ei, Gscore, "\n")
gscore.sum = gscore.sum + Gscore
#gscore.table <- rbind(gscore.table,
#cbind(iteration= simulation.no, locus=gene, Length=Li, observed=Ni, expected=Ei, Gscore=Gscore))
}
#cat("Appending Gscore from this iteration.. \n")
gscores <- append(gscores, gscore.sum)
}
# expected G-scores
write.table(gscores, file="simulated_Gscores_dvh.txt", sep="\t")
mean.gscores <- mean(gscores)
sd.gscores <- sd(gscores)
# get observed G-scores
observed.gscores <- read.delim("Gscores_high_moderate_dvh.txt", sep="\t", header=T)
sum.observed <- sum(observed.gscores[,"Gscore"])
# calculate Z-score
zscore <- (sum.observed - mean.gscores)/sd.gscores
cat("Expected Mean G-scores:", mean.gscores, " with SD:", sd.gscores, "\n")
cat("Observed G-scores:", sum.observed, "\n")
cat("Z-score:", zscore, "\n" )
library('progress')
source('load_1K_mutation_data.R')
# load genome for Mmp
mm.genome <- read.delim("~/Google Drive File Stream/My Drive/Manuscripts/Syntrophy-SingleCell/GenomeFiles/GCA_000011585.1_ASM1158v1_feature_table.txt",
header = T, sep="\t", stringsAsFactors=F)
# collect only genes
mm.genes <- mm.genome[which(mm.genome$X..feature == "gene"),]
View(mm.genome)
# create position list for each gene
coordinate.list <- list()
all.coordinates <- vector()
for(gene in mm.genes$locus_tag){
start <- mm.genes[which(mm.genes$locus_tag == gene),"start"]
end <- mm.genes[which(mm.genes$locus_tag == gene),"end"]
initial.pos <- min(start, end)
final.pos <-max(start, end)
# if plasmid, add coordinates to the end of the lst chromosome position
if(mm.genes[which(mm.genes$locus_tag == gene),"seq_type"] == "chromosome"){
interval <- seq(from=initial.pos, to=final.pos, by = 1)
} else{
interval <- seq(from= (1661129 + initial.pos), to= (1661129 + final.pos), by = 1)
}
coordinate.list[[gene]] <- interval
all.coordinates <- c(all.coordinates, interval)
}
coordinate.list
head(all.coordinates)
coordinate.list <- list()
all.coordinates <- vector()
for(gene in mm.genes$locus_tag){
start <- mm.genes[which(mm.genes$locus_tag == gene),"start"]
end <- mm.genes[which(mm.genes$locus_tag == gene),"end"]
initial.pos <- min(start, end)
final.pos <-max(start, end)
# if plasmid, add coordinates to the end of the lst chromosome position
if(mm.genes[which(mm.genes$locus_tag == gene),"seq_type"] == "chromosome"){
interval <- seq(from=initial.pos, to=final.pos, by = 1)
} else{
interval <- seq(from= (1661129 + initial.pos), to= (1661129 + final.pos), by = 1)
}
coordinate.list[[gene]] <- interval
all.coordinates <- c(all.coordinates, interval)
}
# create position list for each gene
coordinate.list <- list()
all.coordinates <- vector()
for(gene in mm.genes$locus_tag){
start <- mm.genes[which(mm.genes$locus_tag == gene),"start"]
end <- mm.genes[which(mm.genes$locus_tag == gene),"end"]
initial.pos <- min(start, end)
final.pos <-max(start, end)
interval <- seq(from=initial.pos, to=final.pos, by = 1)
coordinate.list[[gene]] <- interval
all.coordinates <- c(all.coordinates, interval)
}
library('progress')
source('load_1K_mutation_data.R')
library('progress')
source('load_1K_mutation_data.R')
# load genome for Mmp
mm.genome <- read.delim("~/Google Drive File Stream/My Drive/Manuscripts/Syntrophy-SingleCell/GenomeFiles/GCA_000011585.1_ASM1158v1_feature_table.txt",
header = T, sep="\t", stringsAsFactors=F)
# collect only genes
mm.genes <- mm.genome[which(mm.genome$X..feature == "gene"),]
# create position list for each gene
coordinate.list <- list()
all.coordinates <- vector()
for(gene in mm.genes$locus_tag){
start <- mm.genes[which(mm.genes$locus_tag == gene),"start"]
end <- mm.genes[which(mm.genes$locus_tag == gene),"end"]
initial.pos <- min(start, end)
final.pos <-max(start, end)
interval <- seq(from=initial.pos, to=final.pos, by = 1)
coordinate.list[[gene]] <- interval
all.coordinates <- c(all.coordinates, interval)
}
### randomly select coordinates from mutated genome
# total # of mutations
total.genes <- length(mm.genes$GeneID)
# get all mutations except synonymous and intergenic
mutations.1000.na <- load_1K_mutation_data(include.ancestor = F,organism = "Methanococcus")
library('ggplot2'); library('reshape2');library(gridExtra);library(gplots)
source("~/Google Drive File Stream/My Drive/R_Scripts/extractLegend.R")
source('load_1K_mutation_data.R')
mut.data.mm<- load_1K_mutation_data(include.ancestor = F,organism = "Methanococcus")
library('progress')
source('load_1K_mutation_data.R')
# load genome for Mmp
mm.genome <- read.delim("~/Google Drive File Stream/My Drive/Manuscripts/Syntrophy-SingleCell/GenomeFiles/GCA_000011585.1_ASM1158v1_feature_table.txt",
header = T, sep="\t", stringsAsFactors=F)
# collect only genes
mm.genes <- mm.genome[which(mm.genome$X..feature == "gene"),]
# create position list for each gene
coordinate.list <- list()
all.coordinates <- vector()
for(gene in mm.genes$locus_tag){
start <- mm.genes[which(mm.genes$locus_tag == gene),"start"]
end <- mm.genes[which(mm.genes$locus_tag == gene),"end"]
initial.pos <- min(start, end)
final.pos <-max(start, end)
interval <- seq(from=initial.pos, to=final.pos, by = 1)
coordinate.list[[gene]] <- interval
all.coordinates <- c(all.coordinates, interval)
}
### randomly select coordinates from mutated genome
# total # of mutations
total.genes <- length(mm.genes$GeneID)
# get all mutations except synonymous and intergenic
mutations.1000.na <- load_1K_mutation_data(include.ancestor = F,organism = "Methanococcus")
library('progress')
source('load_1K_mutation_data.R')
# load genome for Mmp
mm.genome <- read.delim("~/Google Drive File Stream/My Drive/Manuscripts/Syntrophy-SingleCell/GenomeFiles/GCA_000011585.1_ASM1158v1_feature_table.txt",
header = T, sep="\t", stringsAsFactors=F)
# collect only genes
mm.genes <- mm.genome[which(mm.genome$X..feature == "gene"),]
# create position list for each gene
coordinate.list <- list()
all.coordinates <- vector()
for(gene in mm.genes$locus_tag){
start <- mm.genes[which(mm.genes$locus_tag == gene),"start"]
end <- mm.genes[which(mm.genes$locus_tag == gene),"end"]
initial.pos <- min(start, end)
final.pos <-max(start, end)
interval <- seq(from=initial.pos, to=final.pos, by = 1)
coordinate.list[[gene]] <- interval
all.coordinates <- c(all.coordinates, interval)
}
### randomly select coordinates from mutated genome
# total # of mutations
total.genes <- length(mm.genes$GeneID)
# get all mutations except synonymous and intergenic
mutations.1000.na <- load_1K_mutation_data(include.ancestor = F,organism = "Methanococcus")
mutations.1000.na <- mutations.1000.na$mutations.1K.na
all.mutations <- mutations.1000.na[which(mutations.1000.na$effect == "HIGH" | mutations.1000.na$effect == "MODERATE"),]
Ntot <- length(all.mutations$variant_id)
cat("Total # of 1K mutations for Mmp: ", Ntot, "\n")
# total length of coding genome
Ltot <- sum(mm.genes$feature_interval_length)
gscore.table <- data.frame()
gscores = vector()
simulation.target = 1000
pb <- progress_bar$new(
format = " :what Remaining [:bar] :percent eta: :eta (:spin)",
total = simulation.target, clear = FALSE, width= 100)
#pb <- txtProgressBar(min = 1, max = simulation.target, style = 3 ) # progress bar
#cat("Completed %:", "\n")
for(simulation.no in 1:simulation.target){
pb$tick(tokens = list(what = paste("Sim # ", simulation.no, sep="")))
Sys.sleep(1 / simulation.target)
#cat("Running simulation # ", simulation.no, "\n")
#progress <- setTxtProgressBar(pb, simulation.no)
#cat(paste("Running simulation # ", simulation.no, progress, "\n", sep = " "))
# Random position selection
# for whole genome
#random.positions <- sample(seq(from= 1,to= 3570714,by = 1), Ntot)
# for coding genome only
random.positions <- sample(all.coordinates, Ntot)
hit.genes <- vector()
for(position in random.positions){
hit.indice <- which(sapply(1:length(coordinate.list), function(x) any(coordinate.list[[x]] == position)))
hit.gene <- names(coordinate.list[hit.indice])
#hit.gene <- names(coordinate.list[grep(position, coordinate.list)])
hit.genes <- append(hit.genes, hit.gene)
}
# calculate Gscore for each gene
#cat("Calculating Gscores for all genes in the genome..\n")
gscore.sum = 0
gene.no = 0
for(gene in mm.genes$locus_tag){
Li <- mm.genes[which(mm.genes$locus_tag == gene),"feature_interval_length"]
Ni <- length(grep(gene, hit.genes))
# calculate expected number of mutations
Ei <- Ntot*(Li/Ltot)
# calculate GScore
Gscore <- 2*Ni*log1p(Ni/Ei)
#cat(gene, Li, Ni, Ei, Gscore, "\n")
gscore.sum = gscore.sum + Gscore
#gscore.table <- rbind(gscore.table,
#cbind(iteration= simulation.no, locus=gene, Length=Li, observed=Ni, expected=Ei, Gscore=Gscore))
}
#cat("Appending Gscore from this iteration.. \n")
gscores <- append(gscores, gscore.sum)
}
library('ggplot2'); library('reshape2');library(gridExtra);library(gplots)
source("~/Google Drive File Stream/My Drive/R_Scripts/extractLegend.R")
source('load_1K_mutation_data.R')
mut.data.mm<- load_1K_mutation_data(include.ancestor = F,organism = "Methanococcus")
mut.data.mm<- mut.data.mm$all.mutations
mut.data.mm$organism <- "Methanococcus"
#length(mut.data.mm$variant_id) # 3873
#length(unique(mut.data.mm$variant_id)) # 304
mut.type <- melt(table(mut.data.mm$mutation))
mut.effect <- melt(table(mut.data.mm$effect))
p1 <- ggplot(mut.type, aes(factor(Var1, levels = mut.type[order(mut.type$value, decreasing = T),"Var1"]), value, fill=Var1))
p1 <- p1 + geom_bar(stat="identity")
p1 <- p1 + geom_label(aes(label=value))
p1 <- p1 + theme(axis.text = element_blank())
p1 <- p1 + labs(x = "Mutations", y = "Count")
p1
mut.effect <- melt(table(mut.data.mm$effect))
p2 <- ggplot(mut.effect, aes(factor(Var1, levels = mut.effect[order(mut.effect$value, decreasing = T),"Var1"]), value, fill=Var1))
p2 <- p2 + geom_bar(stat="identity")
p2 <- p2 + geom_label(aes(label=value))
p2 <- p2 + theme(axis.text = element_blank())
p2 <- p2 + labs(x = "Effect", y = "Count")
p2
mutations.1000.na <- load_1K_mutation_data(include.ancestor = F,organism = "Methanococcus")
mutations.1000.na <- mutations.1000.na$mutations.1K.na
# load dvh genome features file
mmp.genome <- read.delim("~/Google Drive File Stream/My Drive/Manuscripts/Syntrophy-SingleCell/GenomeFiles/GCA_000011585.1_ASM1158v1_feature_table.txt",
header = T, sep="\t", stringsAsFactors=F)
# collect only genes
mmp.genes <- mmp.genome[which(mmp.genome$X..feature == "gene"),]
mmp.cds <- mmp.genome[which(mmp.genome$X..feature == "CDS" | mmp.genome$X..feature == "tRNA" | mmp.genome$X..feature == "rRNA" | mmp.genome$X..feature == "misc_RNA"),]
##### all mutations except low and modifier forDv
# calculate total coding length (Ltot)
Ltot <- sum(mmp.genes$feature_interval_length) #3313981
# get all mutations except synonymous and intergenic
all.mutations <- mutations.1000.na[which(mutations.1000.na$effect == "HIGH" | mutations.1000.na$effect == "MODERATE"),]
frameshift.mutations <- mutations.1000.na[grep("FRAME_SHIFT", mutations.1000.na$mutation),]
length(frameshift.mutations$variant_id) #56
syncoding.mutations <- mutations.1000.na[which(mutations.1000.na$mutation == "SYNONYMOUS_CODING"),]
length((syncoding.mutations$variant_id)) # 4
Ntot <- length(all.mutations$variant_id)
cat("Total # of mutations:", Ntot,"\n")
cat("Total coding lenght:", Ltot, "\n")
# create a G-score table
all.table <- data.frame()
for(gene in mmp.genes$GeneID){
locus <- mmp.genes[which(mmp.genes$GeneID == gene), "locus_tag"]
locus <- sub("DVUA", "DVKA", locus)
locus <- sub("DVU", "DVU_", locus)
locus <- sub("DVKA", "DVUA", locus)
name <- mmp.cds[which(mmp.cds$GeneID == gene), "name"]
symbol <- mmp.genes[which(mmp.genes$GeneID == gene), "symbol"]
Li <- mmp.genes[which(mmp.genes$GeneID == gene),"feature_interval_length"]
Ni <- length(all.mutations[which(all.mutations$gene_id == locus),"variant_id"])
Nframeshift <- length(frameshift.mutations[which(frameshift.mutations$gene_id == locus),"variant_id"])
Nsynonymous <- length(syncoding.mutations[which(syncoding.mutations$gene_id == locus),"variant_id"])
# calculate expected number of mutations
Ei <- Ntot*(Li/Ltot)
# calculate GScore
Gscore <- 2*Ni*log1p(Ni/Ei)
# # add ancestor annotation
# if(locus %in% ancestor.mutated.genes){
#   ancestor = "ancestral"
# }else{
#   ancestor = "non-ancestral"
# }
all.table <- rbind(all.table, cbind(locus=locus,
symbol= if(length(symbol !=0)) {paste(symbol)}else{paste("")},
name=if(length(name !=0)) {paste(name)}else{paste("")},
Length=Li,
observed=Ni,
expected=Ei,
Gscore=Gscore,
Nframeshift=Nframeshift,
Nsynonymous=Nsynonymous
))
cat(gene, locus, Li, Ni, Ei, "\n")
}
# sort table based on Gscores
all.table <- all.table[order(as.numeric(as.character(all.table$Gscore)), decreasing = T ),]
sum.gscores <- sum(as.numeric(as.character(all.table$Gscore))) # 1092.617
cat("Sum of Observed G-scores:", sum.gscores, "\n")
# write results into a table
write.table(all.table, file="Gscores_high_moderate_mmp.txt", sep="\t")
View(mutations.1000.na)
View(mmp.genome)
mmp.genes
all.mutations
Ntot <- length(all.mutations$variant_id)
Ntot
locus
gene
mmp.genes$GeneID
mmp.genes
##### all mutations except low and modifier forDv
# calculate total coding length (Ltot)
Ltot <- sum(mmp.genes$feature_interval_length) #3313981
# get all mutations except synonymous and intergenic
all.mutations <- mutations.1000.na[which(mutations.1000.na$effect == "HIGH" | mutations.1000.na$effect == "MODERATE"),]
frameshift.mutations <- mutations.1000.na[grep("FRAME_SHIFT", mutations.1000.na$mutation),]
length(frameshift.mutations$variant_id) #56
syncoding.mutations <- mutations.1000.na[which(mutations.1000.na$mutation == "SYNONYMOUS_CODING"),]
length((syncoding.mutations$variant_id)) # 4
Ntot <- length(all.mutations$variant_id)
cat("Total # of mutations:", Ntot,"\n")
cat("Total coding lenght:", Ltot, "\n")
# create a G-score table
all.table <- data.frame()
for(gene in mmp.genes$locus_tag){
locus <- mmp.genes[which(mmp.genes$locus_tag == gene), "locus_tag"]
locus <- sub("DVUA", "DVKA", locus)
locus <- sub("DVU", "DVU_", locus)
locus <- sub("DVKA", "DVUA", locus)
name <- mmp.cds[which(mmp.cds$locus_tag == gene), "name"]
symbol <- mmp.genes[which(mmp.genes$locus_tag == gene), "symbol"]
Li <- mmp.genes[which(mmp.genes$locus_tag == gene),"feature_interval_length"]
Ni <- length(all.mutations[which(all.mutations$gene_id == locus),"variant_id"])
Nframeshift <- length(frameshift.mutations[which(frameshift.mutations$gene_id == locus),"variant_id"])
Nsynonymous <- length(syncoding.mutations[which(syncoding.mutations$gene_id == locus),"variant_id"])
# calculate expected number of mutations
Ei <- Ntot*(Li/Ltot)
# calculate GScore
Gscore <- 2*Ni*log1p(Ni/Ei)
# # add ancestor annotation
# if(locus %in% ancestor.mutated.genes){
#   ancestor = "ancestral"
# }else{
#   ancestor = "non-ancestral"
# }
all.table <- rbind(all.table, cbind(locus=locus,
symbol= if(length(symbol !=0)) {paste(symbol)}else{paste("")},
name=if(length(name !=0)) {paste(name)}else{paste("")},
Length=Li,
observed=Ni,
expected=Ei,
Gscore=Gscore,
Nframeshift=Nframeshift,
Nsynonymous=Nsynonymous
))
cat(gene, locus, Li, Ni, Ei, "\n")
}
# sort table based on Gscores
all.table <- all.table[order(as.numeric(as.character(all.table$Gscore)), decreasing = T ),]
sum.gscores <- sum(as.numeric(as.character(all.table$Gscore))) # 1092.617
cat("Sum of Observed G-scores:", sum.gscores, "\n")
# write results into a table
write.table(all.table, file="Gscores_high_moderate_mmp.txt", sep="\t")
library('progress')
source('load_1K_mutation_data.R')
# load genome for Mmp
mm.genome <- read.delim("~/Google Drive File Stream/My Drive/Manuscripts/Syntrophy-SingleCell/GenomeFiles/GCA_000011585.1_ASM1158v1_feature_table.txt",
header = T, sep="\t", stringsAsFactors=F)
# collect only genes
mm.genes <- mm.genome[which(mm.genome$X..feature == "gene"),]
# create position list for each gene
coordinate.list <- list()
all.coordinates <- vector()
for(gene in mm.genes$locus_tag){
start <- mm.genes[which(mm.genes$locus_tag == gene),"start"]
end <- mm.genes[which(mm.genes$locus_tag == gene),"end"]
initial.pos <- min(start, end)
final.pos <-max(start, end)
interval <- seq(from=initial.pos, to=final.pos, by = 1)
coordinate.list[[gene]] <- interval
all.coordinates <- c(all.coordinates, interval)
}
### randomly select coordinates from mutated genome
# total # of mutations
total.genes <- length(mm.genes$GeneID)
# get all mutations except synonymous and intergenic
mutations.1000.na <- load_1K_mutation_data(include.ancestor = F,organism = "Methanococcus")
mutations.1000.na <- mutations.1000.na$mutations.1K.na
all.mutations <- mutations.1000.na[which(mutations.1000.na$effect == "HIGH" | mutations.1000.na$effect == "MODERATE"),]
Ntot <- length(all.mutations$variant_id)
cat("Total # of 1K mutations for Mmp: ", Ntot, "\n")
# total length of coding genome
Ltot <- sum(mm.genes$feature_interval_length)
gscore.table <- data.frame()
gscores = vector()
simulation.target = 1000
pb <- progress_bar$new(
format = " :what Remaining [:bar] :percent eta: :eta (:spin)",
total = simulation.target, clear = FALSE, width= 100)
#pb <- txtProgressBar(min = 1, max = simulation.target, style = 3 ) # progress bar
#cat("Completed %:", "\n")
for(simulation.no in 1:simulation.target){
pb$tick(tokens = list(what = paste("Sim # ", simulation.no, sep="")))
Sys.sleep(1 / simulation.target)
#cat("Running simulation # ", simulation.no, "\n")
#progress <- setTxtProgressBar(pb, simulation.no)
#cat(paste("Running simulation # ", simulation.no, progress, "\n", sep = " "))
# Random position selection
# for whole genome
#random.positions <- sample(seq(from= 1,to= 3570714,by = 1), Ntot)
# for coding genome only
random.positions <- sample(all.coordinates, Ntot)
hit.genes <- vector()
for(position in random.positions){
hit.indice <- which(sapply(1:length(coordinate.list), function(x) any(coordinate.list[[x]] == position)))
hit.gene <- names(coordinate.list[hit.indice])
#hit.gene <- names(coordinate.list[grep(position, coordinate.list)])
hit.genes <- append(hit.genes, hit.gene)
}
# calculate Gscore for each gene
#cat("Calculating Gscores for all genes in the genome..\n")
gscore.sum = 0
gene.no = 0
for(gene in mm.genes$locus_tag){
Li <- mm.genes[which(mm.genes$locus_tag == gene),"feature_interval_length"]
Ni <- length(grep(gene, hit.genes))
# calculate expected number of mutations
Ei <- Ntot*(Li/Ltot)
# calculate GScore
Gscore <- 2*Ni*log1p(Ni/Ei)
#cat(gene, Li, Ni, Ei, Gscore, "\n")
gscore.sum = gscore.sum + Gscore
#gscore.table <- rbind(gscore.table,
#cbind(iteration= simulation.no, locus=gene, Length=Li, observed=Ni, expected=Ei, Gscore=Gscore))
}
#cat("Appending Gscore from this iteration.. \n")
gscores <- append(gscores, gscore.sum)
}
# expected G-scores
write.table(gscores, file="simulated_Gscores_mmp.txt", sep="\t")
mean.gscores <- mean(gscores)
sd.gscores <- sd(gscores)
# get observed G-scores
observed.gscores <- read.delim("Gscores_high_moderate_mmp.txt", sep="\t", header=T)
sum.observed <- sum(observed.gscores[,"Gscore"])
# calculate Z-score
zscore <- (sum.observed - mean.gscores)/sd.gscores
cat("Expected Mean G-scores:", mean.gscores, " with SD:", sd.gscores, "\n")
cat("Observed G-scores:", sum.observed, "\n")
cat("Z-score:", zscore, "\n" )
